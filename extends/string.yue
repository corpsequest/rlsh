import sin, max from math
with string
    .interrupt = (len) =>
        if #@ > len then
            return @sub 1, len .. "..."
        else
            return @

    .chop = (len) => return @sub(1, len), @sub(len+1, #@)

    .slice = (str, start=0, stop=#str) -> --start and stop are inclusive
        len = #str
        if start < 0 then start = len + start
        if start < 0 then start = 0
        if stop < 0 then stop = len + stop
        if stop > len then stop = len
        return str\sub start, stop

	.capitalize = (str) => @sub(1,1)\upper! .. @sub 2

	.lpad = (c='0', n=2) =>
	  s = ''
	  s ..= c while #s < n-#@
	  s .. @

	.rpad = (c='0', n=2) =>
	  s = ''
	  s ..= c while #s < n-#@
	  @ .. s

	.split = (delim, maxNb=0) =>
	  return {@} if @find delim == nil
	  result = {}
	  if delim == '' or not delim
		result[i] = @sub i,i for i in 1..#@
		return result
	  maxNb = math.max 0, maxNb
	  pat = "(.-)" .. delim .. "()"
	  nb = 0
	  lastPos = 1
	  for part, pos in @gmatch pat
		nb += 1
		result[nb] = part
		lastPos = pos
		if nb == maxNb then break
	  unless nb == maxNb
		result[nb+1] = @sub lastPos
	  return result
