import abs, round from math
import 'class.room' as Room
import 'class.corridor' as Corridor
import 'class.map.dungeon' as Dungeon

FLOOR, WALL, DOOR = 0, 1, 2

defaults =
  room_width: {4, 9}
  room_height: {4, 6}
  room_dug_percentage: .4
  time_limit: 1000

class Uniform extends Dungeon
  new: (width, height, @options={}) =>
	super width, height

	@_dig_callback = bind @, @_dig_callback
	@_can_dig_callback = bind @, @_can_dig_callback
	@_is_wall_callback = bind @, @_is_wall_callback

	@options[k] ??= v for k, v in pairs defaults

	@_room_attempts = 20
	@_corridor_attempts = 20
	@_connected, @_unconnected = {}, {}

  create: (callback) =>
	t1 = os.clock!*1000
	while true
	  t2 = os.clock!*1000
	  return nil if t2 - t1 > @options.time_limit
	  @_map = @fill WALL
	  @_dug = 0
	  @_rooms = {}
	  @_unconnected = {}
	  @_generate_rooms!
	  break if @_generate_corridors!
	
	return @ unless callback
	for y = 1, @height
	  for x = 1, @width
		callback x, y, @_map[x][y]
	@

  _generate_rooms: =>
	w = @width - 4
	h = @height - 4
	room = nil
	repeat
	  room = @_generate_room!
	  break if @_dug/(w*h) > @options.room_dug_percentage
	until not room

  _generate_room: =>
	count = 0
	while count < @_room_attempts
	  count += 1
	  room = Room\create_random @width, @height, @options, @rng
	  if room\is_valid @_is_wall_callback, @_can_dig_callback
		room\create @_dig_callback
		@_rooms[] = room
		return room
	nil

  _generate_corridors: =>
	count = 0
	while count < @_corridor_attempts
	  count += 1
	  @_corridors = {}
	  @_map = @fill WALL
	  for i = 1, #@_rooms
		with @_rooms[i]
		  \clear_doors!
		  \create @_dig_callback

	  @_unconnected = table.randomize table.slice @_rooms
	  @_connected = {}
	  @_connected[] = table.remove @_unconnected
	  while true
		connected = table.random @_connected
		room1 = @_closest_room @_unconnected, connected
		room2 = @_closest_room @_connected, room1
		break unless @_connect_rooms room1, room2
		return true if #@_unconnected < 1
	false

  _closest_room: (rooms, room) =>
	dist = math.huge
	center = room.center
	result = nil

	for i = 1, #rooms
	  with r = rooms[i]
		c = .center
		dx = c[1] - center[1]
		dy = c[2] - center[2]
		d = dx^2 + dy^2
		if d < dist
		  dist = d
		  result = r
	result

  _connect_rooms: (room1, room2) =>
	center1, center2 = room1.center, room2.center

	dx, dy = center2[1] - center1[1], center2[2] - center1[2]

	dir_index1, dir_index2, mini, maxi, index = 0, 0, 0, 0, 0

	if abs(dx) < abs(dy)
	  dir_index1 = dy > 0 and 3 or 1
	  dir_index2 = (dir_index1+1)%4 + 1
	  mini, maxi = room2.left, room2.right
	  index = 1
	else
	  dir_index1 = dx > 0 and 2 or 4
	  dir_index2 = (dir_index1+1)%4 + 1
	  mini, maxi = room2.top, room2.bottom
	  index = 2

	index2 = (index%2) + 1

	start = @_place_in_wall room1, dir_index1
	return false if not start or #start < 1
	end_tbl = {}

	if start[index] >= mini and start[index] <= maxi
	  end_tbl = table.slice start
	  value = switch dir_index2
		when 1
		  room2.top - 1
		when 2
		  room2.right + 1
		when 3
		  room2.bottom + 1
		when 4
		  room2.left - 1
	  end_tbl[index2] = value
	  @_dig_line {start, end_tbl}
	elseif start[index] < mini - 1 or start[index] > maxi + 1
	  diff = start[index] - center2[index]
	  rotation = switch dir_index2
		when 1, 2
		  diff < 0 and 2 or 4
		when 3, 4
		  diff < 0 and 4 or 2
	    else
		  error'failed to rotate'
	  dir_index2 = (dir_index2 + rotation - 1)%4 + 1

	  end_tbl = @_place_in_wall room2, dir_index2
	  return false unless end_tbl

	  mid = {0, 0}
	  mid[index] = start[index]
	  mid[index2] = end_tbl[index2]
	  @_dig_line {start, mid, end_tbl}
	else
	  end_tbl = @_place_in_wall room2, dir_index2
	  return false unless end_tbl
	  mid = round (end_tbl[index2] + start[index2]) / 2

	  mid1, mid2 = {0, 0}, {0, 0}
	  mid1[index] = start[index]
	  mid1[index2] = mid
	  mid2[index] = end_tbl[index]
	  mid2[index2] = mid
	  @_dig_line {start, mid1, mid2, end_tbl}

	room1\add_door start[1], start[2]
	room2\add_door end_tbl[1], end_tbl[2]

	index = table.index_of @_unconnected, room1
	if index > 0
	  @_connected[] = table.remove @_unconnected, index

	true

  _place_in_wall: (room, dir_index) =>
	start = {0, 0}
	dir = {0, 0}
	length = 0
	ret_table = {}

	switch dir_index
	  when 1
		dir = {1, 0}
		start = {room.left - 1, room.top - 1}
		length = room.right - room.left
	  when 2
		dir = {0, 1}
		start = {room.right + 1, room.top}
		length = room.bottom - room.top
	  when 3
		dir = {1, 0}
		start = {room.left - 1, room.bottom + 1}
		length = room.right - room.left
	  when 4
		dir = {0, 1}
		start = {room.left - 1, room.top - 1}
		length = room.bottom - room.top
	avail = {}
	last_bad_index = -1
	null = string.char 0
	for i = 1, length
	  x, y = start[1] + i * dir[1], start[2] + i * dir[2]
	  avail[] = null
	  if @_map[x][y] == WALL
		avail[i] = {x, y} if last_bad_index != i-1
	  else
		last_bad_index = i
		avail[i-1] = null if i > 1
	
	for i = 1, #avail
	  if avail[i] != string.char 0
		ret_table[] = avail[i]
		i -= 1
	
	if #ret_table > 0
	  return table.random ret_table

  _dig_line: (points) =>
	for i = 2, #points
	  start = points[i-1]
	  endpoint = points[i]
	  with corridor = Corridor start[1], start[2], endpoint[1], endpoint[2]
		\create @_dig_callback
		@_corridors[] = corridor

  _dig_callback: (x, y, value) =>
	@_map[x][y] = value
	@_dug += 1 if value == FLOOR

  _is_wall_callback: (x, y) =>
	return false if x < 1 or y < 1 or x > @width or y > @height
	@_map[x][y] == WALL

  _can_dig_callback: (x, y) =>
	return false if x < 2 or y < 2 or x >= @width or y >= @height
	@_map[x][y] == WALL
