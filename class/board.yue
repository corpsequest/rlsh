PointSet = require'class.pointset'

iterate = (i) =>
  i -= 2
  if i > 0
	x, y = @_points\peek i
	return i, x, y, @_values[i]

export default class Board using Accessors
  new: => @clear!

  clear: =>
	@_points = PointSet!
	@_values = {}

  remove_cell: (x, y) =>
	i = @_points\find x, y
	return unless i
	n = #@_points - 1
	old_value = @_values[i]
	@_points\pluck i
	@_values[i] = @_values[n]
	@_values[n] = nil
	old_value

  set_cell: (x, y, value) =>
	return @remove_cell x, y if value == nil
	i, j = @_points\push x, y
	old_value = j and @_values[j]
	@_values[i or j] = value
	value.x, value.y = x, y if istable value

  get_cell: (x, y) =>
	i = @_points\find x, y
	@_values[i] if i

  each: => iterate, @, #@_points + 1

  get_random: =>
	x, y = @_points\get_random!
	x, y, @get_cell x, y

bitser.registerClass Board
